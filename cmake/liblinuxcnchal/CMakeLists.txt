cmake_minimum_required(VERSION 3.0)
set(PROJECT "linuxcnchal") 
project(${PROJECT} VERSION 0 LANGUAGES C)

# Set variables.
set(SRC_DIR "${CMAKE_CURRENT_SOURCE_DIR}")

# Set includepaths.
include_directories(${SRC_DIR})
include_directories(${SRC_DIR})
include_directories(${SRC_DIR}/../../src)
include_directories(${SRC_DIR}/../../src/emc)
include_directories(${SRC_DIR}/../../src/hal)
include_directories(${SRC_DIR}/../../src/rtapi)
include_directories(${SRC_DIR}/../../include)

# Set prefix.
# set(CMAKE_SHARED_LIBRARY_PREFIX "")

ADD_LIBRARY(${PROJECT} SHARED 
    ${SRC_DIR}/../../src/rtapi/uspace_ulapi.c
    ${SRC_DIR}/../../src/hal/hal_lib.c
)

add_definitions(-DULAPI -DUSPACE -Drealtime -D__MODULE__ -DSEQUENTIAL_SUPPORT -DHAL_SUPPORT)

# Add verion nr. .so.0.0.0
set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${PROJECT_VERSION})

# Set include paths for libraries to link.
target_include_directories(${PROJECT_NAME} PRIVATE ${BUILD_DIR})

# Link to libraries.
target_link_libraries(${PROJECT_NAME} PRIVATE -pthread -lrt -lreadline -fPIC)

# Set custom output name :
# set_property(TARGET ${PROJECT} PROPERTY OUTPUT_NAME thename)

# Make install
# Install both the shared library and its versioned counterpart
install(TARGETS ${PROJECT} 
    LIBRARY DESTINATION ${SRC_DIR}/../../lib
    RUNTIME DESTINATION ${SRC_DIR}/../../lib  # If you want to install binaries separately
)
